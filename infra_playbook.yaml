---
- name: Manage MySQL Docker Compose setup
  hosts: prodVm
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Ensure Python 3 usage
    compose_dir: /05-foyer-app
    compose_file_path: "{{ compose_dir }}/docker-compose.yml"  
    git_prometheus_dir: ./prom_conf #src
    prometheus_dir: "{{ compose_dir }}/prom_conf" #dest 
    prometheus_file_path: "{{ prometheus_dir }}/prometheus.yml"
    prometheus_url: http://192.168.43.10:9090
    git_alertmanager_dir: ./alertmanager #src
    alertmanager_dir: "{{ compose_dir }}/alertmanager"  #dest
    git_grafana_datasource_dir: ./grafana/datasources #src
    grafana_datasource_dir: "{{ compose_dir }}/grafana/datasources" #dest
    git_grafana_dashboards_dir: ./grafana/dashboards #src
    grafana_dashboards_dir: "{{ compose_dir }}/grafana/dashboards"  #dest
    db_name: db-foyer
    db_user: seif
    db_password: "openstack"  
    root_password: ""  
    mysql_container_name: mysql-devops
    external_docker_network: infra-network

  tasks:
    - name: Install pip3 if not present (Ubuntu/Debian)
      apt:
        name: python3-pip
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install pip3 if not present (RHEL/CentOS)
      yum:
        name: python3-pip
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Create Docker Compose directory
      file:
        path: "{{ compose_dir }}"
        state: directory
        mode: '0755'

    - name: Create prom_conf  directory
      file:
        path: "{{ prometheus_dir }}"
        state: directory
        mode: '0755'
    
    - name: Copy prom_conf/* to destination only if not exist
      ansible.builtin.copy:
        src: "{{git_prometheus_dir}}/*"
        dest: "{{ prometheus_dir }}/"
        force: no 

    - name: Create AlertManager directory
      file:
        path: "{{ alertmanager_dir }}"
        state: directory
        mode: '0755'
    
    - name: Copy all AlertManger directory files to destination only if it does not exist
      ansible.builtin.copy:
        src: "{{ git_alertmanager_dir }}/*"
        dest: "{{ alertmanager_dir }}/"
        force: no 

    - name: Create grafana resource directory
      file:
        path: "{{ grafana_datasource_dir }}"
        state: directory
        mode: '0755'
    
    - name: Copy all grafana resource directory files to destination only if it does not exist
      ansible.builtin.copy:
        src: "{{ git_grafana_datasource_dir }}/*"
        dest: "{{ grafana_datasource_dir }}/"
        force: no 

    - name: Create grafana dashboard directory
      file:
        path: "{{ grafana_dashboards_dir }}"
        state: directory
        mode: '0755'
    
    - name: Copy all grafana dashboard directory files to destination only if it does not exist
      ansible.builtin.copy:
        src: "{{ git_grafana_dashboards_dir }}/*"
        dest: "{{ grafana_dashboards_dir }}/"
        force: no 

    - name: Check if Docker external network bridge exists
      command: docker network ls --filter name={{ external_docker_network }} --format "{{ '{{' }}.Name{{ '}}' }}"
      register: network_check
      changed_when: false

    - name: Create Docker external network if not exist
      command: docker network create {{ external_docker_network }}
      when: network_check.stdout == ''

    - name: Create Docker Compose file
      copy:
        dest: "{{ compose_file_path }}"
        content: |
          services:
            mysql:
              image: mysql:latest
              container_name: {{ mysql_container_name }}
              environment:
                MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
                MYSQL_ROOT_PASSWORD: "{{ root_password }}"
                MYSQL_DATABASE: "{{ db_name }}"
                MYSQL_USER: "{{ db_user }}"
                MYSQL_PASSWORD: "{{ db_password }}"
              ports:
                - "3306:3306"
              volumes:
                - mysql_data_vol:/var/lib/mysql
              networks:
                - {{ external_docker_network }}
          #---------------------monitoring---------------------------------
            prometheus:
              container_name: prometheus-devops
              image: prom/prometheus
              ports:
                - "9090:9090"
              volumes:
                - prometheus:/prometheus
                #remote upload wont work if file only mounted (container can't see changes in this situation so no changes re noticed acutually unless completely restarte)
                - {{ prometheus_dir }}:/etc/prometheus
              command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus'
                - '--web.console.libraries=/usr/share/prometheus/console_libraries'
                - '--web.console.templates=/usr/share/prometheus/consoles'
                - '--web.enable-lifecycle' # reloadConfig-> curl -X POST http://ipPromethus:port/-/reload 
                - "--storage.tsdb.retention.time=5d"
                - "--storage.tsdb.retention.size=500MB"
              networks:
                - {{ external_docker_network }}
              restart: unless-stopped

            #---------AlertManager---
            alertmanager:
              image: prom/alertmanager:v0.26.0
              container_name: alertmanager
              volumes:
                #- ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
                - {{ alertmanager_dir }}:/etc/alertmanager
              command:
                - "--config.file=/etc/alertmanager/alertmanager.yml"
                - "--storage.path=/alertmanager"
              ports:
                - "9093:9093"
              networks:
                - {{ external_docker_network }}
              restart: unless-stopped

            grafana:
              container_name: grafana
              image: grafana/grafana
              environment:
                - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
                - GF_AUTH_ANONYMOUS_ENABLED=true
                - GF_AUTH_BASIC_ENABLED=false
                - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
                - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
                - GF_DATASOURCES__DEFAULT__TYPE=prometheus
                - GF_DATASOURCES__DEFAULT__URL={{ prometheus_url }}
                - GF_DATASOURCES__DEFAULT__ACCESS=proxy
              ports:
                - "3000:3000"
              depends_on:
                prometheus:
                  condition: service_started
              volumes:
                - grafana:/var/lib/grafana
                - {{ grafana_datasource_dir }}:/etc/grafana/provisioning  # Added provisioning for datasources and dashboards
                - {{ grafana_dashboards_dir }}:/var/lib/grafana/dashboards
              networks:
                - {{ external_docker_network }}
              restart: unless-stopped

          #----------
          volumes:
            mysql_data_vol: 
            prometheus:
            grafana:
          networks:
            {{ external_docker_network }}:
              external: true


    - name: up Docker compose 
      command: docker compose up -d
      args:
        chdir: "{{ compose_dir }}"

    - name: Wait for MySQL to be ready
      wait_for:
        port: 3306
        timeout: 60 # Use the increased wait time
        state: started

